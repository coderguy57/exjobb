from sympy import symbols, diff, pprint

# Define symbols
m1, m2, m3, x1, x2, x3 = symbols('m1 m2 m3 x1 x2 x3')
t = symbols('t')

# Define expressions for x1, x2, x3, m1, m2, m3 over time
x1_dot = m2**2 * (x2 - x1)**2 + m3**2 * (x3 - x1)**2 + 2*m2*m3*(x2 - x1)*(x3 - x1)
x2_dot = m1**2 * (x2 - x1)**2 + m3**2 * (x3 - x2)**2 + 2*m1*m3*(x2 - x1)*(x3 - x2)
x3_dot = m1**2 * (x3 - x1)**2 + m2**2 * (x3 - x2)**2 + 2*m1*m2*(x3 - x1)*(x3 - x2)

m1_dot = -m1 * (-m2 - m3) * (m2 * (x2 - x1) + m3 * (x3 - x1))
m2_dot = -m2 * (+m1 - m3) * (m1 * (x2 - x1) + m3 * (x3 - x2))
m3_dot = -m3 * (+m1 + m2) * (m1 * (x3 - x1) + m2 * (x3 - x2))

# Define the expression whose derivative we want to find
exprs = [
+3*m1*m2**2*m3**3*x3**3+3*m1**2*m2*m3**3*x3**3-6*m1*m2**2*m3**3*x2*x3**2-3*m1**2*m2*m3**3*x2*x3**2+3*m1*m2**3*m3**2*x2*x3**2-3*m1*m2**3*m3**2*x1*x3**2+3*m1**3*m2*m3**2*x2*x3**2-3*m1**3*m2*m3**2*x1*x3**2-3*m1*m2**2*m3**3*x1*x3**2+3*m2**3*m3**3*x2**2*x3+3*m1**2*m2**3*m3*x2**2*x3-3*m1*m2**3*m3**2*x1*x2**2-3*m1**2*m2*m3**3*x1**2*x2-1*m1**3*m3**3*x1**3+3*m1**3*m2*m3**2*x1**2*x2-3*m1**3*m2*m3**2*x1**3+6*m1**2*m2**3*m3*x1*x2**2+1*m1**3*m3**3*x3**3-3*m1**3*m2**2*m3*x1*x2**2+6*m1**3*m2**2*m3*x1**2*x2-3*m1**3*m2**2*m3*x1**3+3*m1**3*m2**3*x1**2*x2-3*m1**3*m2**3*x1*x2**2-1*m1**3*m2**3*x1**3+1*m1**3*m2**3*x2**3+6*m1**3*m2*m3**2*x1**2*x3-6*m1**3*m2*m3**2*x1*x2*x3+6*m1**2*m2*m3**3*x1*x2*x3+3*m1**2*m2**3*m3*x1**2*x3-3*m1**2*m2**3*m3*x2**3+1*m2**3*m3**3*x3**3-3*m2**3*m3**3*x2*x3**2+3*m1*m2**3*m3**2*x2**3-3*m1*m2**2*m3**3*x1*x2**2-1*m2**3*m3**3*x2**3-6*m1**2*m2*m3**3*x1*x3**2-6*m1**2*m2**3*m3*x1*x2*x3-3*m1**3*m3**3*x1*x3**2-6*m1*m2**3*m3**2*x2**2*x3+6*m1*m2**3*m3**2*x1*x2*x3+3*m1**3*m3**3*x1**2*x3+3*m1**3*m2**2*m3*x2**2*x3+3*m1**3*m2**2*m3*x1**2*x3-6*m1**3*m2**2*m3*x1*x2*x3-3*m1**2*m2**3*m3*x1**2*x2+3*m1**2*m2*m3**3*x1**2*x3+3*m1*m2**2*m3**3*x2**2*x3+6*m1*m2**2*m3**3*x1*x2*x3,
-1*m1**2*m2**4*m3**4*x2*x3**4-2*m1**3*m2**3*m3**4*x2*x3**4-1*m1**4*m2**2*m3**4*x2*x3**4+1*m1**2*m2**4*m3**4*x1*x3**4+1*m1**4*m2**2*m3**4*x1*x3**4+3*m1**2*m2**4*m3**4*x2**2*x3**3-2*m1**4*m2**3*m3**3*x2**2*x3**3-2*m1**2*m2**4*m3**4*x1*x2*x3**3+2*m1**4*m2**2*m3**4*x1*x2*x3**3-2*m1**4*m2**4*m3**2*x1*x2**3*x3+2*m1**4*m2**4*m3**2*x1**3*x2*x3-3*m1**2*m2**4*m3**4*x1**2*x2**2*x3-3*m1**2*m2**4*m3**4*x2**3*x3**2-2*m1**4*m2**2*m3**4*x1**3*x2*x3+4*m1**3*m2**4*m3**3*x2**3*x3**2+3*m1**4*m2**2*m3**4*x1**2*x2**2*x3-4*m1**3*m2**4*m3**3*x1**3*x2*x3+6*m1**3*m2**4*m3**3*x1**2*x2**2*x3+1*m1**4*m2**2*m3**4*x2**2*x3**3-2*m1**3*m2**4*m3**3*x2**2*x3**3+1*m1**2*m2**4*m3**4*x2**4*x3-2*m1**4*m2**3*m3**3*x1**4*x3+6*m1**4*m2**3*m3**3*x1**2*x2**2*x3+1*m1**4*m2**4*m3**2*x2**4*x3-1*m1**2*m2**4*m3**4*x1**2*x3**3-4*m1**3*m2**3*m3**4*x1**3*x2*x3-1*m1**4*m2**2*m3**4*x1**4*x3+4*m1**3*m2**3*m3**4*x1*x2**3*x3-1*m1**4*m2**4*m3**2*x1**4*x3+2*m1**3*m2**4*m3**3*x1**3*x2**2-4*m1**3*m2**4*m3**3*x1**2*x2**3+3*m1**4*m2**4*m3**2*x1**2*x2**3-4*m1**4*m2**3*m3**3*x1**3*x2**2+2*m1**3*m2**4*m3**3*x1*x2**4-3*m1**4*m2**4*m3**2*x1**3*x2**2-1*m1**4*m2**2*m3**4*x1**3*x2**2+2*m1**2*m2**4*m3**4*x1*x2**3*x3+2*m1**3*m2**3*m3**4*x1**3*x2**2-2*m1**3*m2**3*m3**4*x1**2*x2**3+2*m1**4*m2**3*m3**3*x1**4*x2+2*m1**4*m2**3*m3**3*x1**2*x2**3+1*m1**2*m2**4*m3**4*x1**2*x2**3+2*m1**3*m2**3*m3**4*x1*x3**4+1*m1**4*m2**4*m3**2*x1**4*x2-2*m1**3*m2**4*m3**3*x2**4*x3+1*m1**4*m2**4*m3**2*x1**3*x3**2+3*m1**4*m2**4*m3**2*x1*x2**2*x3**2+4*m1**4*m2**3*m3**3*x1**3*x3**2+2*m1**3*m2**4*m3**3*x1**3*x3**2+3*m1**4*m2**2*m3**4*x1**3*x3**2-6*m1**3*m2**4*m3**3*x1*x2**2*x3**2-1*m1**2*m2**4*m3**4*x1*x2**4-3*m1**4*m2**2*m3**4*x1*x2**2*x3**2+2*m1**3*m2**3*m3**4*x1**3*x3**2+6*m1**3*m2**3*m3**4*x1**2*x2*x3**2-1*m1**4*m2**4*m3**2*x1*x2**4-6*m1**3*m2**3*m3**4*x1*x2**2*x3**2+1*m1**4*m2**2*m3**4*x1**4*x2-4*m1**4*m2**3*m3**3*x1*x2**3*x3-2*m1**3*m2**3*m3**4*x2**3*x3**2-3*m1**4*m2**4*m3**2*x1**2*x2*x3**2-1*m1**4*m2**4*m3**2*x2**3*x3**2-4*m1**3*m2**3*m3**4*x1**2*x3**3-6*m1**4*m2**3*m3**3*x1**2*x2*x3**2+4*m1**3*m2**3*m3**4*x2**2*x3**3+2*m1**4*m2**3*m3**3*x2**3*x3**2+3*m1**2*m2**4*m3**4*x1**2*x2*x3**2-2*m1**4*m2**3*m3**3*x1**2*x3**3+4*m1**3*m2**4*m3**3*x1*x2*x3**3-2*m1**3*m2**4*m3**3*x1**2*x3**3-3*m1**4*m2**2*m3**4*x1**2*x3**3+4*m1**4*m2**3*m3**3*x1*x2*x3**3,
+1*m2**4*m3**4*x3**4+6*m1**2*m2**2*m3**4*x3**4-4*m2**4*m3**4*x2*x3**3-12*m1*m2**3*m3**4*x2*x3**3+1*m1**4*m3**4*x3**4+4*m1**4*m2*m3**3*x2*x3**3-4*m1**4*m3**4*x1*x3**3-4*m1*m2**4*m3**3*x1*x3**3-12*m1**2*m2**2*m3**4*x2*x3**3+4*m1*m2**4*m3**3*x2*x3**3+6*m2**4*m3**4*x2**2*x3**2+12*m1*m2**3*m3**4*x2**2*x3**2+24*m1**2*m2**2*m3**4*x1*x2*x3**2+12*m1*m2**4*m3**3*x1*x2*x3**2+12*m1*m2**3*m3**4*x1*x2*x3**2-12*m1**4*m2**2*m3**2*x1*x2*x3**2+6*m1**2*m2**2*m3**4*x1**2*x3**2+6*m1**4*m2**2*m3**2*x2**2*x3**2+6*m1**2*m2**4*m3**2*x2**4+1*m1**4*m2**4*x2**4+24*m1**4*m2**2*m3**2*x1**2*x2*x3+4*m1*m2**4*m3**3*x1*x2**3-4*m1*m2**4*m3**3*x2**4+1*m2**4*m3**4*x2**4-12*m1**2*m2**4*m3**2*x1*x2**3-4*m1**4*m2**4*x1*x2**3-4*m1**4*m2**4*x1**3*x2-4*m1**4*m2*m3**3*x1*x3**3+12*m1**3*m2**4*m3*x1*x2**3-12*m1**3*m2**4*m3*x1**2*x2**2+6*m1**2*m2**4*m3**2*x2**2*x3**2+4*m1**3*m2**4*m3*x1**3*x2-12*m1**2*m2**2*m3**4*x1**2*x2*x3+6*m1**2*m2**2*m3**4*x1**2*x2**2-12*m1**2*m2**2*m3**4*x1*x3**3-12*m1*m2**4*m3**3*x1*x2**2*x3+6*m1**2*m2**4*m3**2*x1**2*x2**2-4*m1*m2**3*m3**4*x1*x3**3-12*m1**2*m2**4*m3**2*x2**3*x3+1*m1**4*m2**4*x1**4+6*m1**4*m2**4*x1**2*x2**2-12*m1**2*m2**4*m3**2*x1*x2*x3**2+4*m1**3*m2*m3**4*x1**3*x2-12*m1**2*m2**2*m3**4*x1*x2**2*x3+4*m1**4*m2**3*m3*x1**4-12*m1*m2**4*m3**3*x2**2*x3**2+12*m1**4*m2**3*m3*x1**2*x2**2+6*m1**4*m2**2*m3**2*x1**4-4*m1**4*m2**3*m3*x1**3*x3+6*m1**4*m2**2*m3**2*x1**2*x2**2-12*m1**4*m2**3*m3*x1*x2**2*x3-4*m2**4*m3**4*x2**3*x3+1*m1**4*m3**4*x1**4-12*m1**4*m2**3*m3*x1**3*x2-4*m1**4*m2**3*m3*x1*x2**3-4*m1**3*m2**4*m3*x2**4-4*m1**3*m2**4*m3*x1**3*x3+12*m1**3*m2**4*m3*x1**2*x2*x3-12*m1**3*m2*m3**4*x1*x3**3-12*m1**4*m2*m3**3*x1*x2*x3**2-12*m1**3*m2**4*m3*x1*x2**2*x3-4*m1**3*m2*m3**4*x2*x3**3+4*m1**3*m2**4*m3*x2**3*x3+6*m1**2*m2**2*m3**4*x2**2*x3**2-12*m1**4*m2**2*m3**2*x1**3*x3-12*m1**4*m2**2*m3**2*x1*x2**2*x3+4*m1*m2**3*m3**4*x1*x2**3-12*m1**4*m2*m3**3*x1**3*x3+6*m1**2*m2**4*m3**2*x1**2*x3**2-4*m1*m2**3*m3**4*x2**3*x3+12*m1**4*m2*m3**3*x1**2*x3**2-4*m1**4*m3**4*x1**3*x3-12*m1**3*m2*m3**4*x1**2*x2*x3+4*m1**3*m2*m3**4*x3**4+4*m1**4*m2**3*m3*x2**3*x3+4*m1**4*m2*m3**3*x1**4-12*m1**2*m2**4*m3**2*x1**2*x2*x3+12*m1**3*m2*m3**4*x1**2*x3**2+12*m1**4*m2*m3**3*x1**2*x2*x3-4*m1**4*m2*m3**3*x1**3*x2-4*m1**3*m2*m3**4*x1**3*x3+24*m1**2*m2**4*m3**2*x1*x2**2*x3-12*m1*m2**3*m3**4*x1*x2**2*x3-12*m1**4*m2**2*m3**2*x1**3*x2+12*m1**4*m2**3*m3*x1**2*x2*x3+12*m1*m2**4*m3**3*x2**3*x3+4*m1*m2**3*m3**4*x3**4+6*m1**4*m2**2*m3**2*x1**2*x3**2+12*m1**3*m2*m3**4*x1*x2*x3**2+6*m1**4*m3**4*x1**2*x3**2,
+6*m1*m2**2*m3**3*x3**3+6*m2**2*m3**4*x2*x3**2+6*m1*m2*m3**4*x2*x3**2-6*m2**3*m3**3*x2*x3**2-18*m1**2*m2*m3**3*x2*x3**2-3*m2**4*m3**2*x2*x3**2-3*m1**2*m3**4*x3**3-6*m1*m2**3*m3**2*x2*x3**2+6*m1*m2*m3**4*x1*x3**2+6*m1**2*m3**4*x1*x3**2+6*m1*m2**3*m3**2*x2**3+6*m1*m2**4*m3*x2**3-6*m1**3*m3**3*x1*x3**2-6*m1**2*m2**3*m3*x2**3+6*m1**2*m2**3*m3*x1**2*x3-6*m1*m2**4*m3*x1*x2**2-3*m1**2*m3**4*x1**2*x3+6*m1**3*m2*m3**2*x2*x3**2-3*m1**2*m2**4*x2**3-3*m1**4*m3**2*x1*x3**2-6*m1**3*m2**2*m3*x1**3+6*m1**2*m2**4*x1*x2**2-6*m1*m2**3*m3**2*x1*x3**2-6*m1**3*m2**3*x1*x2**2-2*m1**3*m2**3*x1**3+6*m1**3*m2**3*x1**2*x2-3*m1**4*m2**2*x1*x2**2-3*m1**4*m2**2*x1**3+24*m1**2*m2*m3**3*x1*x2*x3-18*m1**2*m2**2*m3**2*x1**2*x2+6*m1**4*m2*m3*x1**2*x2+24*m1**2*m2**3*m3*x1*x2**2-24*m1*m2**2*m3**3*x2*x3**2-6*m1**4*m2*m3*x1**3-3*m2**4*m3**2*x2**3+6*m1**4*m2*m3*x1**2*x3+6*m1**2*m2*m3**3*x3**3+24*m1*m2**3*m3**2*x1*x2*x3-6*m1*m2**2*m3**3*x1*x2**2-3*m1**4*m3**2*x1**3+18*m1**3*m2**2*m3*x1**2*x3-24*m1**3*m2**2*m3*x1*x2*x3+6*m1**3*m2**2*m3*x2**2*x3-6*m1**3*m2*m3**2*x1**2*x2-18*m1**2*m2**2*m3**2*x2**2*x3-2*m1**3*m3**3*x1**3-6*m1*m2*m3**4*x3**3+2*m1**3*m3**3*x3**3-18*m1*m2**3*m3**2*x1*x2**2+6*m1**4*m2**2*x1**2*x2+6*m1**3*m2**2*m3*x1*x2**2-2*m2**3*m3**3*x2**3-6*m1**2*m2*m3**3*x1**2*x3-6*m1**2*m2*m3**3*x1**2*x2-3*m2**2*m3**4*x3**3+6*m1**4*m3**2*x1**2*x3+24*m1**3*m2*m3**2*x1**2*x3+2*m1**3*m2**3*x2**3+6*m1**3*m3**3*x1**2*x3-6*m1**4*m2*m3*x1*x2*x3+2*m2**3*m3**3*x3**3+6*m1*m2**4*m3*x1*x2*x3-6*m1**3*m2*m3**2*x1**3-6*m1*m2**4*m3*x2**2*x3-18*m1**3*m2*m3**2*x1*x3**2-18*m1**2*m2**2*m3**2*x1*x3**2+54*m1**2*m2**2*m3**2*x1*x2*x3-6*m1**2*m2**3*m3*x2**2*x3+6*m2**4*m3**2*x2**2*x3-3*m1**2*m2**4*x1**2*x2+18*m1*m2**2*m3**3*x2**2*x3-6*m1*m2*m3**4*x1*x2*x3+6*m2**3*m3**3*x2**2*x3-18*m1**2*m2**3*m3*x1**2*x2+6*m1*m2**2*m3**3*x1*x3**2-3*m2**2*m3**4*x2**2*x3,
+1*m1**2*m2**2*m3**2*x2*x3**2-1*m1**2*m2**2*m3**2*x1*x3**2+1*m1**2*m2**2*m3**2*x1**2*x3-1*m1**2*m2**2*m3**2*x2**2*x3+1*m1**2*m2**2*m3**2*x1*x2**2-1*m1**2*m2**2*m3**2*x1**2*x2,
-1*m2*m3**3*x3-1*m1*m3**3*x3-1*m2**3*m3*x3-3*m1**2*m2*m3*x3+1*m1**3*m2*x1+1*m2*m3**3*x2+1*m1*m2**3*x1+1*m1**3*m3*x1-1*m1**3*m3*x3+3*m1*m2**2*m3*x1-3*m1*m2**2*m3*x3+1*m2**3*m3*x2+3*m1*m2*m3**2*x1+1*m1*m3**3*x1+3*m1**2*m2*m3*x2-1*m1**3*m2*x2-1*m1*m2**3*x2-3*m1*m2*m3**2*x2,
+6*m1*m2**2*m3*x1*x3-3*m2**2*m3**2*x3**2-6*m1*m2*m3**2*x1*x2+6*m1*m2**2*m3*x2**2-2*m1*m3**3*x3**2+12*m1**2*m2*m3*x1*x2+12*m1*m2*m3**2*x1*x3+6*m1**2*m2**2*x1*x2-6*m1**2*m2*m3*x2*x3-6*m1*m2*m3**2*x3**2-2*m1*m2**3*x2**2+2*m1*m2**3*x1*x2+2*m2**3*m3*x2**2-3*m1**2*m3**2*x1**2-12*m1*m2**2*m3*x2*x3-6*m1**2*m2*m3*x1**2-2*m1**3*m2*x1*x2-3*m1**2*m2**2*x1**2+2*m1**3*m2*x1**2-3*m2**2*m3**2*x2**2+2*m1*m3**3*x1*x3-2*m1**3*m3*x1*x3-2*m2**3*m3*x2*x3+6*m1**2*m3**2*x1*x3+6*m2**2*m3**2*x2*x3-2*m2*m3**3*x3**2+2*m1**3*m3*x1**2+2*m2*m3**3*x2*x3-3*m1**2*m2**2*x2**2-3*m1**2*m3**2*x3**2,
-3*m2**2*m3**2*x3**2-6*m1*m2*m3**2*x1*x2+6*m1*m2**2*m3*x1*x3+6*m1*m2**2*m3*x2**2+2*m1*m3**3*x3**2-12*m1*m2**2*m3*x1*x2+6*m1**2*m2**2*x1*x2-6*m1**2*m2*m3*x2*x3-6*m1*m2*m3**2*x3**2+2*m1*m2**3*x2**2-2*m1*m2**3*x1*x2-2*m2**3*m3*x2**2-3*m1**2*m3**2*x1**2-6*m1**2*m2*m3*x1**2+12*m1**2*m2*m3*x1*x3+2*m1**3*m2*x1*x2-3*m1**2*m2**2*x1**2-2*m1**3*m2*x1**2-3*m2**2*m3**2*x2**2-2*m1*m3**3*x1*x3+12*m1*m2*m3**2*x2*x3+2*m1**3*m3*x1*x3+2*m2**3*m3*x2*x3+6*m1**2*m3**2*x1*x3+6*m2**2*m3**2*x2*x3+2*m2*m3**3*x3**2-2*m1**3*m3*x1**2-2*m2*m3**3*x2*x3-3*m1**2*m2**2*x2**2-3*m1**2*m3**2*x3**2,
+1*m2*m3**3*x3**3+1*m1*m3**3*x3**3-1*m2*m3**3*x2*x3**2-1*m1*m3**3*x1*x3**2-1*m1**3*m2*x1**3-1*m1**3*m3*x1**3+1*m1**3*m3*x1**2*x3+1*m1**3*m2*x1**2*x2-3*m1**2*m2*m3*x1**2*x2-1*m1*m2**3*x1*x2**2+3*m1*m2*m3**2*x2*x3**2+1*m1*m2**3*x2**3-3*m1*m2**2*m3*x1*x2**2+3*m1*m2**2*m3*x2**2*x3-1*m2**3*m3*x2**3+1*m2**3*m3*x2**2*x3+3*m1**2*m2*m3*x1**2*x3-3*m1*m2*m3**2*x1*x3**2,
-1*m2*m3*x3+1*m2*m3*x2-1*m1*m2*x2-1*m1*m3*x3+1*m1*m3*x1+1*m1*m2*x1
]

def test(expression):
	# Compute the total derivative w.r.t. time
	return 	diff(expression, x1)*x1_dot + diff(expression, x2)*x2_dot + diff(expression, x3)*x3_dot + \
			diff(expression, m1)*m1_dot + diff(expression, m2)*m2_dot + diff(expression, m3)*m3_dot


# for expr in exprs:
	# print(test(expr).simplify())

# expr1 = +6*m1*m2**2*m3*x1*x3-3*m2**2*m3**2*x3**2-6*m1*m2*m3**2*x1*x2+6*m1*m2**2*m3*x2**2-2*m1*m3**3*x3**2+12*m1**2*m2*m3*x1*x2+12*m1*m2*m3**2*x1*x3+6*m1**2*m2**2*x1*x2-6*m1**2*m2*m3*x2*x3-6*m1*m2*m3**2*x3**2-2*m1*m2**3*x2**2+2*m1*m2**3*x1*x2+2*m2**3*m3*x2**2-3*m1**2*m3**2*x1**2-12*m1*m2**2*m3*x2*x3-6*m1**2*m2*m3*x1**2-2*m1**3*m2*x1*x2-3*m1**2*m2**2*x1**2+2*m1**3*m2*x1**2-3*m2**2*m3**2*x2**2+2*m1*m3**3*x1*x3-2*m1**3*m3*x1*x3-2*m2**3*m3*x2*x3+6*m1**2*m3**2*x1*x3+6*m2**2*m3**2*x2*x3-2*m2*m3**3*x3**2+2*m1**3*m3*x1**2+2*m2*m3**3*x2*x3-3*m1**2*m2**2*x2**2-3*m1**2*m3**2*x3**2
# expr2 = -3*m2**2*m3**2*x3**2-6*m1*m2*m3**2*x1*x2+6*m1*m2**2*m3*x1*x3+6*m1*m2**2*m3*x2**2+2*m1*m3**3*x3**2-12*m1*m2**2*m3*x1*x2+6*m1**2*m2**2*x1*x2-6*m1**2*m2*m3*x2*x3-6*m1*m2*m3**2*x3**2+2*m1*m2**3*x2**2-2*m1*m2**3*x1*x2-2*m2**3*m3*x2**2-3*m1**2*m3**2*x1**2-6*m1**2*m2*m3*x1**2+12*m1**2*m2*m3*x1*x3+2*m1**3*m2*x1*x2-3*m1**2*m2**2*x1**2-2*m1**3*m2*x1**2-3*m2**2*m3**2*x2**2-2*m1*m3**3*x1*x3+12*m1*m2*m3**2*x2*x3+2*m1**3*m3*x1*x3+2*m2**3*m3*x2*x3+6*m1**2*m3**2*x1*x3+6*m2**2*m3**2*x2*x3+2*m2*m3**3*x3**2-2*m1**3*m3*x1**2-2*m2*m3**3*x2*x3-3*m1**2*m2**2*x2**2-3*m1**2*m3**2*x3**2
# expr3 = -1*m2*m3**3*x3-1*m1*m3**3*x3-1*m2**3*m3*x3-3*m1**2*m2*m3*x3+1*m1**3*m2*x1+1*m2*m3**3*x2+1*m1*m2**3*x1+1*m1**3*m3*x1-1*m1**3*m3*x3+3*m1*m2**2*m3*x1-3*m1*m2**2*m3*x3+1*m2**3*m3*x2+3*m1*m2*m3**2*x1+1*m1*m3**3*x1+3*m1**2*m2*m3*x2-1*m1**3*m2*x2-1*m1*m2**3*x2-3*m1*m2*m3**2*x2
# expr4 = +1*m2*m3**3*x3**3+1*m1*m3**3*x3**3-1*m2*m3**3*x2*x3**2-1*m1*m3**3*x1*x3**2-1*m1**3*m2*x1**3-1*m1**3*m3*x1**3+1*m1**3*m3*x1**2*x3+1*m1**3*m2*x1**2*x2-3*m1**2*m2*m3*x1**2*x2-1*m1*m2**3*x1*x2**2+3*m1*m2*m3**2*x2*x3**2+1*m1*m2**3*x2**3-3*m1*m2**2*m3*x1*x2**2+3*m1*m2**2*m3*x2**2*x3-1*m2**3*m3*x2**3+1*m2**3*m3*x2**2*x3+3*m1**2*m2*m3*x1**2*x3-3*m1*m2*m3**2*x1*x3**2
# print(test(expr1-expr2).simplify())
# print(test(expr3).simplify())
# print(test(expr4).simplify())

# print(test(m1*x1+m2*x2+m3*x3).simplify())
# print(test(m1**3*m2*(-x1 + x2) + m1**3*m3*(-x1 + x3) + 3*m1**2*m2*m3*(-x2 + x3)).simplify())

# A = m1**3*m2*(x2-x1) + m1**3*m3*(x3-x1) + 3*m1**2*m2*m3*(x3-x2)
# B = m2**3*m1*(x2-x1) + m2**3*m3*(x3-x2) + 3*m2**2*m1*m3*(x3-x1)
# C = m3**3*m1*(x3-x1) + m3**3*m2*(x3-x2) + 3*m3**2*m1*m2*(x2-x1)
M = m1*m2*(x2-x1) + m1*m3*(x3-x1) + m2*m3*(x3-x2)
A = m1**2*M + 2*m1**2*m2*m3*(x3-x2)
B = m2**2*M + 2*m2**2*m1*m3*(x3-x1)
C = m3**2*M + 2*m3**2*m1*m2*(x2-x1)

expr = A + B + C

# print(test(M).simplify())
# print(test(m1*m2*(x2-x1) * m1*m3*(x3-x1) * m2*m3*(x3-x2)).simplify())
# print(test(expr).simplify())

# for i in range(3):
# 	expr = A*x1**i + B*x2**i + C*x3**i
# 	print(test(expr).simplify())


out = 1
for term in M.args:
	out = out * term
pprint(out.expand().simplify())

H2 = -m1**2*m2**2*(-x1 + x2)**2 - 2*m1**2*m2*m3*(-x1 + x2)*(-x1 + x3) - m1**2*m3**2*(-x1 + x3)**2 + 2*m1*m2**2*m3*(-x1 + x2)*(-x2 + x3) - 2*m1*m2*m3**2*(-x1 + x3)*(-x2 + x3) - m2**2*m3**2*(-x2 + x3)**2
pprint(test(H2).expand().simplify())