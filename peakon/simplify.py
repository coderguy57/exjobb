from sympy import *

# Defining symbols
m1, m2, m3, x1, x2, x3 = symbols('m1 m2 m3 x1 x2 x3')

exprs = [
	-3*m1*m2**2*m3**3*x3**3-3*m1**2*m2*m3**3*x3**3+6*m1*m2**2*m3**3*x2*x3**2+3*m1**2*m2*m3**3*x2*x3**2-3*m1*m2**3*m3**2*x2*x3**2+3*m1*m2**3*m3**2*x1*x3**2-3*m1**3*m2*m3**2*x2*x3**2+3*m1**3*m2*m3**2*x1*x3**2+3*m1*m2**2*m3**3*x1*x3**2-3*m2**3*m3**3*x2**2*x3-3*m1**2*m2**3*m3*x2**2*x3+3*m1*m2**3*m3**2*x1*x2**2+3*m1**2*m2*m3**3*x1**2*x2+1*m1**3*m3**3*x1**3-3*m1**3*m2*m3**2*x1**2*x2+3*m1**3*m2*m3**2*x1**3-6*m1**2*m2**3*m3*x1*x2**2-1*m1**3*m3**3*x3**3+3*m1**3*m2**2*m3*x1*x2**2-6*m1**3*m2**2*m3*x1**2*x2+3*m1**3*m2**2*m3*x1**3-3*m1**3*m2**3*x1**2*x2+3*m1**3*m2**3*x1*x2**2+1*m1**3*m2**3*x1**3-1*m1**3*m2**3*x2**3-6*m1**3*m2*m3**2*x1**2*x3+6*m1**3*m2*m3**2*x1*x2*x3-6*m1**2*m2*m3**3*x1*x2*x3-3*m1**2*m2**3*m3*x1**2*x3+3*m1**2*m2**3*m3*x2**3-1*m2**3*m3**3*x3**3+3*m2**3*m3**3*x2*x3**2-3*m1*m2**3*m3**2*x2**3+3*m1*m2**2*m3**3*x1*x2**2+1*m2**3*m3**3*x2**3+6*m1**2*m2*m3**3*x1*x3**2+6*m1**2*m2**3*m3*x1*x2*x3+3*m1**3*m3**3*x1*x3**2+6*m1*m2**3*m3**2*x2**2*x3-6*m1*m2**3*m3**2*x1*x2*x3-3*m1**3*m3**3*x1**2*x3-3*m1**3*m2**2*m3*x2**2*x3-3*m1**3*m2**2*m3*x1**2*x3+6*m1**3*m2**2*m3*x1*x2*x3+3*m1**2*m2**3*m3*x1**2*x2-3*m1**2*m2*m3**3*x1**2*x3-3*m1*m2**2*m3**3*x2**2*x3-6*m1*m2**2*m3**3*x1*x2*x3,
	-1*m1**2*m2**2*m3**2*x2*x3**2+1*m1**2*m2**2*m3**2*x1*x3**2-1*m1**2*m2**2*m3**2*x1**2*x3+1*m1**2*m2**2*m3**2*x2**2*x3-1*m1**2*m2**2*m3**2*x1*x2**2+1*m1**2*m2**2*m3**2*x1**2*x2,
	+6*m1*m2**2*m3*x1*x3-3*m2**2*m3**2*x3**2-6*m1*m2*m3**2*x1*x2+6*m1*m2**2*m3*x2**2-2*m1*m3**3*x3**2+12*m1**2*m2*m3*x1*x2+12*m1*m2*m3**2*x1*x3+6*m1**2*m2**2*x1*x2-6*m1**2*m2*m3*x2*x3-6*m1*m2*m3**2*x3**2-2*m1*m2**3*x2**2+2*m1*m2**3*x1*x2+2*m2**3*m3*x2**2-3*m1**2*m3**2*x1**2-12*m1*m2**2*m3*x2*x3-6*m1**2*m2*m3*x1**2-2*m1**3*m2*x1*x2-3*m1**2*m2**2*x1**2+2*m1**3*m2*x1**2-3*m2**2*m3**2*x2**2+2*m1*m3**3*x1*x3-2*m1**3*m3*x1*x3-2*m2**3*m3*x2*x3+6*m1**2*m3**2*x1*x3+6*m2**2*m3**2*x2*x3-2*m2*m3**3*x3**2+2*m1**3*m3*x1**2+2*m2*m3**3*x2*x3-3*m1**2*m2**2*x2**2-3*m1**2*m3**2*x3**2,
	-1*m2*m3**3*x3-1*m1*m3**3*x3-1*m2**3*m3*x3-3*m1**2*m2*m3*x3+1*m1**3*m2*x1+1*m2*m3**3*x2+1*m1*m2**3*x1+1*m1**3*m3*x1-1*m1**3*m3*x3+3*m1*m2**2*m3*x1-3*m1*m2**2*m3*x3+1*m2**3*m3*x2+3*m1*m2*m3**2*x1+1*m1*m3**3*x1+3*m1**2*m2*m3*x2-1*m1**3*m2*x2-1*m1*m2**3*x2-3*m1*m2*m3**2*x2,
	-3*m2**2*m3**2*x3**2-6*m1*m2*m3**2*x1*x2+6*m1*m2**2*m3*x1*x3+6*m1*m2**2*m3*x2**2+2*m1*m3**3*x3**2-12*m1*m2**2*m3*x1*x2+6*m1**2*m2**2*x1*x2-6*m1**2*m2*m3*x2*x3-6*m1*m2*m3**2*x3**2+2*m1*m2**3*x2**2-2*m1*m2**3*x1*x2-2*m2**3*m3*x2**2-3*m1**2*m3**2*x1**2-6*m1**2*m2*m3*x1**2+12*m1**2*m2*m3*x1*x3+2*m1**3*m2*x1*x2-3*m1**2*m2**2*x1**2-2*m1**3*m2*x1**2-3*m2**2*m3**2*x2**2-2*m1*m3**3*x1*x3+12*m1*m2*m3**2*x2*x3+2*m1**3*m3*x1*x3+2*m2**3*m3*x2*x3+6*m1**2*m3**2*x1*x3+6*m2**2*m3**2*x2*x3+2*m2*m3**3*x3**2-2*m1**3*m3*x1**2-2*m2*m3**3*x2*x3-3*m1**2*m2**2*x2**2-3*m1**2*m3**2*x3**2,
	+1*m2*m3**3*x3**3+1*m1*m3**3*x3**3-1*m2*m3**3*x2*x3**2-1*m1*m3**3*x1*x3**2-1*m1**3*m2*x1**3-1*m1**3*m3*x1**3+1*m1**3*m3*x1**2*x3+1*m1**3*m2*x1**2*x2-3*m1**2*m2*m3*x1**2*x2-1*m1*m2**3*x1*x2**2+3*m1*m2*m3**2*x2*x3**2+1*m1*m2**3*x2**3-3*m1*m2**2*m3*x1*x2**2+3*m1*m2**2*m3*x2**2*x3-1*m2**3*m3*x2**3+1*m2**3*m3*x2**2*x3+3*m1**2*m2*m3*x1**2*x3-3*m1*m2*m3**2*x1*x3**2,
	+1*m2*m3*x3-1*m2*m3*x2+1*m1*m2*x2+1*m1*m3*x3-1*m1*m3*x1-1*m1*m2*x1
]

# sq = expand(exprs[6] * exprs[6])
# print(exprs[4])
# print()
# print(exprs[2])
# print()
# print(exprs[2] + exprs[4] + 6*sq)

expr1 = +6*m1*m2**2*m3*x1*x3-3*m2**2*m3**2*x3**2-6*m1*m2*m3**2*x1*x2+6*m1*m2**2*m3*x2**2-2*m1*m3**3*x3**2+12*m1**2*m2*m3*x1*x2+12*m1*m2*m3**2*x1*x3+6*m1**2*m2**2*x1*x2-6*m1**2*m2*m3*x2*x3-6*m1*m2*m3**2*x3**2-2*m1*m2**3*x2**2+2*m1*m2**3*x1*x2+2*m2**3*m3*x2**2-3*m1**2*m3**2*x1**2-12*m1*m2**2*m3*x2*x3-6*m1**2*m2*m3*x1**2-2*m1**3*m2*x1*x2-3*m1**2*m2**2*x1**2+2*m1**3*m2*x1**2-3*m2**2*m3**2*x2**2+2*m1*m3**3*x1*x3-2*m1**3*m3*x1*x3-2*m2**3*m3*x2*x3+6*m1**2*m3**2*x1*x3+6*m2**2*m3**2*x2*x3-2*m2*m3**3*x3**2+2*m1**3*m3*x1**2+2*m2*m3**3*x2*x3-3*m1**2*m2**2*x2**2-3*m1**2*m3**2*x3**2
expr2 = -3*m2**2*m3**2*x3**2-6*m1*m2*m3**2*x1*x2+6*m1*m2**2*m3*x1*x3+6*m1*m2**2*m3*x2**2+2*m1*m3**3*x3**2-12*m1*m2**2*m3*x1*x2+6*m1**2*m2**2*x1*x2-6*m1**2*m2*m3*x2*x3-6*m1*m2*m3**2*x3**2+2*m1*m2**3*x2**2-2*m1*m2**3*x1*x2-2*m2**3*m3*x2**2-3*m1**2*m3**2*x1**2-6*m1**2*m2*m3*x1**2+12*m1**2*m2*m3*x1*x3+2*m1**3*m2*x1*x2-3*m1**2*m2**2*x1**2-2*m1**3*m2*x1**2-3*m2**2*m3**2*x2**2-2*m1*m3**3*x1*x3+12*m1*m2*m3**2*x2*x3+2*m1**3*m3*x1*x3+2*m2**3*m3*x2*x3+6*m1**2*m3**2*x1*x3+6*m2**2*m3**2*x2*x3+2*m2*m3**3*x3**2-2*m1**3*m3*x1**2-2*m2*m3**3*x2*x3-3*m1**2*m2**2*x2**2-3*m1**2*m3**2*x3**2
expr3 = -1*m2*m3**3*x3-1*m1*m3**3*x3-1*m2**3*m3*x3-3*m1**2*m2*m3*x3+1*m1**3*m2*x1+1*m2*m3**3*x2+1*m1*m2**3*x1+1*m1**3*m3*x1-1*m1**3*m3*x3+3*m1*m2**2*m3*x1-3*m1*m2**2*m3*x3+1*m2**3*m3*x2+3*m1*m2*m3**2*x1+1*m1*m3**3*x1+3*m1**2*m2*m3*x2-1*m1**3*m2*x2-1*m1*m2**3*x2-3*m1*m2*m3**2*x2
expr4 = +1*m2*m3**3*x3**3+1*m1*m3**3*x3**3-1*m2*m3**3*x2*x3**2-1*m1*m3**3*x1*x3**2-1*m1**3*m2*x1**3-1*m1**3*m3*x1**3+1*m1**3*m3*x1**2*x3+1*m1**3*m2*x1**2*x2-3*m1**2*m2*m3*x1**2*x2-1*m1*m2**3*x1*x2**2+3*m1*m2*m3**2*x2*x3**2+1*m1*m2**3*x2**3-3*m1*m2**2*m3*x1*x2**2+3*m1*m2**2*m3*x2**2*x3-1*m2**3*m3*x2**3+1*m2**3*m3*x2**2*x3+3*m1**2*m2*m3*x1**2*x3-3*m1*m2*m3**2*x1*x3**2
expr5 = -3*m1*m2**2*m3**3*x3**3-3*m1**2*m2*m3**3*x3**3+6*m1*m2**2*m3**3*x2*x3**2+3*m1**2*m2*m3**3*x2*x3**2-3*m1*m2**3*m3**2*x2*x3**2+3*m1*m2**3*m3**2*x1*x3**2-3*m1**3*m2*m3**2*x2*x3**2+3*m1**3*m2*m3**2*x1*x3**2+3*m1*m2**2*m3**3*x1*x3**2-3*m2**3*m3**3*x2**2*x3-3*m1**2*m2**3*m3*x2**2*x3+3*m1*m2**3*m3**2*x1*x2**2+3*m1**2*m2*m3**3*x1**2*x2+1*m1**3*m3**3*x1**3-3*m1**3*m2*m3**2*x1**2*x2+3*m1**3*m2*m3**2*x1**3-6*m1**2*m2**3*m3*x1*x2**2-1*m1**3*m3**3*x3**3+3*m1**3*m2**2*m3*x1*x2**2-6*m1**3*m2**2*m3*x1**2*x2+3*m1**3*m2**2*m3*x1**3-3*m1**3*m2**3*x1**2*x2+3*m1**3*m2**3*x1*x2**2+1*m1**3*m2**3*x1**3-1*m1**3*m2**3*x2**3-6*m1**3*m2*m3**2*x1**2*x3+6*m1**3*m2*m3**2*x1*x2*x3-6*m1**2*m2*m3**3*x1*x2*x3-3*m1**2*m2**3*m3*x1**2*x3+3*m1**2*m2**3*m3*x2**3-1*m2**3*m3**3*x3**3+3*m2**3*m3**3*x2*x3**2-3*m1*m2**3*m3**2*x2**3+3*m1*m2**2*m3**3*x1*x2**2+1*m2**3*m3**3*x2**3+6*m1**2*m2*m3**3*x1*x3**2+6*m1**2*m2**3*m3*x1*x2*x3+3*m1**3*m3**3*x1*x3**2+6*m1*m2**3*m3**2*x2**2*x3-6*m1*m2**3*m3**2*x1*x2*x3-3*m1**3*m3**3*x1**2*x3-3*m1**3*m2**2*m3*x2**2*x3-3*m1**3*m2**2*m3*x1**2*x3+6*m1**3*m2**2*m3*x1*x2*x3+3*m1**2*m2**3*m3*x1**2*x2-3*m1**2*m2*m3**3*x1**2*x3-3*m1*m2**2*m3**3*x2**2*x3-6*m1*m2**2*m3**3*x1*x2*x3
expr6 = +1*m2*m3*x3-1*m2*m3*x2+1*m1*m2*x2+1*m1*m3*x3-1*m1*m3*x1-1*m1*m2*x1
temp = x1**2*x2**2*x3**2
print(expr1 - (expr1 - expr2)/2 + 3*expand(expr6 * expr6))
print()
print(expand((expr1 - expr2)/4*temp))
print()
print(expand(expr3*temp))
print()
print(-expand(expr4*temp))
print()
print(expr6)
print()
print((expr5 + expand(expr6 * expr6 * expr6)) / 6)

A = m1**3*m2*(x2-x1) + m1**3*m3*(x3-x1) + m1**2*m2*m3*(x3-x2)
B = m2**3*m1*(x2-x1) + m2**3*m3*(x3-x2) + m2**2*m1*m3*(x3-x1)
C = m3**3*m1*(x3-x1) + m3**3*m2*(x3-x2) + m3**2*m1*m2*(x2-x1)

# a, b, c = symbols('a b c')
# expr = -expr3
# expr = expr.subs({m1*m2: a, m1*m3: b, m2*m3: c})
# expr = collect(expr, [a, b, c])
# print()
# print(expr)
# expr = -(expr1 - expr2)/4
# expr = expr.subs({m1*m2: a, m1*m3: b, m2*m3: c})
# expr = collect(expr, [a, b, c])
# print()
# print(expr)
# expr = a*m1**2*(x2-x1) + b*m1**2*(x3-x1) + 3*a*b*(x3-x2)
# expr = expr.subs({a: m1*m2, b: m1*m3, c: m2*m3})
# print()
# print(expr)



# # print(exprs[7] + 3*sq)
# # print(exprs[6] + 3*sq)
# print(exprs[7] - exprs[7])

# a, b, c = symbols('a b c')
# for expr in exprs:
# 	# expr = factor(expr, x2 - x1)
# 	# expr = expr.subs({m1*m2: a, m1*m3: b, m2*m3: c})
# 	expr = expr.subs({m1*x1: a, m2*x2: b, m3*x3: c})
# 	# expr = factor(simplify(expr))
# 	expr = collect(expr, [a, b, c])
# 	# expr = expr.subs({a: m1*x1, b: m2*x2, c: m3*x3})
# 	# expr = factor(expr)
# 	print(expr)
# 	print()

# comb = expand(exprs[-1]*exprs[-1]
# print(simplify(comb))
# print()